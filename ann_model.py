# -*- coding: utf-8 -*-
"""Ann Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tghjTU19Nb33CvlRJdL4B3Rs1a7CnuiR
"""

import pandas as pd
import numpy as np

data = pd.read_csv('/content/Churn_Modelling.csv')

data

data.corr()

data=data.drop(['RowNumber','CustomerId','Surname'],axis=1)

data

"""# Feature Selection"""

X=data.drop(labels=['Exited'],axis=1)
y=data['Exited']

X['Geography'] = X['Geography'].astype('category')
X['Gender'] = X['Gender'].astype('category')

#Encoding
abc_columns = X.select_dtypes(['category']).columns
X[abc_columns] = X[abc_columns].apply(lambda x: x.cat.codes)

X

#tranform to array
y=np.asarray(y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

"""# Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']] = sc.fit_transform(X_train[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']])
X_test[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']] = sc.transform(X_test[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']])

X_train

X_train=np.asarray(X_train)
X_test=np.asarray(X_test)

"""# ANN MODEL"""

import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

classifier = Sequential()

from tensorflow.keras.layers import Dropout
classifier.add(Dense(units = 10,activation = 'tanh'))
classifier.add(Dropout(0.5))
# Adding the second hidden layer
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'tanh'))
classifier.add(Dropout(0.5))
# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

classifier.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy')

from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)

# Commented out IPython magic to ensure Python compatibility.
# #fitting the model on train data
# %%time
# classifier.fit(x=X_train, 
#           y=y_train, 
#           epochs=100,
#           validation_data=(X_test, y_test), verbose=1,
#           callbacks=[early_stop]
#           )

model_loss = pd.DataFrame(classifier.history.history)
model_loss.plot()

predictions = classifier.predict_classes(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,predictions))

prediction_new =classifier.predict_classes([[0,499,1,39,3,50000,2,1,1,60000]])

prediction_new